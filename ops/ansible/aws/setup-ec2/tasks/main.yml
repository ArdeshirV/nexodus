---
# tasks file for setup-ec2
- name: Installing boto library
  pip:
    name: boto
    state: present

### VPC Blue Security Group ###
- name: Creating Security Group for VPC Blue
  amazon.aws.ec2_group:
    name: "{{ secgroup_name_blue }}"
    aws_region: "{{ aws_region }}"
    description: "{{ security_group_description }}"
    vpc_id: "{{ vpc_id_blue }}"
    rules:
      - proto: all
        cidr_ip: "0.0.0.0/0"

### VPC Blue Relay Node Deployment ###
- name: Launching Relay Router in VPC Blue
  amazon.aws.ec2_instance:
    name: "hub-router-zone-blue"
    aws_region: "{{ aws_region }}"
    key_name: "{{ aws_key_name }}"
    instance_type: "{{ aws_instance_type }}"
    image_id: "{{ aws_image_id }}"
    security_group: "{{ secgroup_name_blue }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 25
          delete_on_termination: true
          volume_type: standard
    network:
      assign_public_ip: true
    tags:
      NodeType: "{{ aws_nodetype_tag }}"
    state: running
    wait: true
  register: relayIp

- name: Updating the hub-router node's public ip in inventory
  lineinfile:
    path: "{{ inventory_location }}"
    regexp: "relayNode"
    line: "[relayNode]\n{{ relayIp['instances'][0]['public_ip_address']}} ansible_user={{ ansible_user }} ansible_connection=ssh private_address={{ relayIp['instances'][0]['private_ip_address']}} hostname=relay"

#### VPC Blue Agent Node Deployment ###
- name: Launching EC2 Agent Node Instances in VPC Blue
  amazon.aws.ec2_instance:
    name: "nexodus-demo-blue-node-{{ item+1 }}"
    aws_region: "{{ aws_region }}"
    key_name: "{{ aws_key_name }}"
    instance_type: "{{ aws_instance_type }}"
    image_id: "{{ aws_image_id }}"
    security_group: "{{ secgroup_name_blue }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 25
          delete_on_termination: true
          volume_type: standard
    network:
      assign_public_ip: true
    subnet_id: "{{ aws_subnet_blue }}"
    tags:
      NodeType: "{{ aws_nodetype_tag }}"
    state: running
    wait: true
  register: nodeIP
  loop: "{{ range(0, node_count_blue | int) }}"
  async: 7200
  poll: 0

- name: Wait for all Blue VPC instances to finish initializing
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: ec2_jobs
  loop: "{{ nodeIP['results'] }}"
  until: ec2_jobs.finished
  retries: 300

- name: Combine ec2_jobs and index
  set_fact:
    ec2_jobs_with_index: "{{ ec2_jobs.results | zip(range(0, node_count_blue | int)) | list }}"

- name: Updating the node's public ip in inventory
  lineinfile:
    path: "{{ inventory_location }}"
    regexp: "nexodusNodes"
    line: "[nexodusNodes]\n{{ item.0['instances'][0]['public_ip_address'] }} ansible_user={{ ansible_user }} ansible_connection=ssh node_name=nexodus-demo-blue-node-{{ item.1 + 1 }}"
  loop: "{{ ec2_jobs_with_index }}"

### VPC Green Security Group  ###
- name: Creating Security Group for VPC Green
  amazon.aws.ec2_group:
    name: "{{ secgroup_name_green }}"
    aws_region: "{{ aws_region }}"
    description: "{{ security_group_description }}"
    vpc_id: "{{ vpc_id_green }}"
    rules:
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
          - 22
        cidr_ip: 0.0.0.0/0

### VPC Green Agent Node Deployment ###
- name: Launching EC2 Agent Node Instances in VPC Green
  amazon.aws.ec2_instance:
    name: "nexodus-demo-green-node-{{ item+1 }}"
    aws_region: "{{ aws_region }}"
    key_name: "{{ aws_key_name }}"
    instance_type: "{{ aws_instance_type }}"
    image_id: "{{ aws_image_id }}"
    security_group: "{{ secgroup_id_green }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 25
          delete_on_termination: true
          volume_type: standard
    network:
      assign_public_ip: true
    subnet_id: "{{ aws_subnet_green }}"
    tags:
      NodeType: "{{ aws_nodetype_tag }}"
    state: running
    wait: true
  register: nodeIP
  loop: "{{ range(0, node_count_green | int) }}"
  async: 7200
  poll: 0

- name: Wait for all green VPC instances to finish initializing
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: ec2_jobs
  loop: "{{ nodeIP['results'] }}"
  until: ec2_jobs.finished
  retries: 300

- name: Combine ec2_jobs and index
  set_fact:
    ec2_jobs_with_index: "{{ ec2_jobs.results | zip(range(0, node_count_green | int)) | list }}"

- name: Updating the node's public ip in inventory
  lineinfile:
    path: "{{ inventory_location }}"
    regexp: "nexodusNodes"
    line: "[nexodusNodes]\n{{ item.0['instances'][0]['public_ip_address'] }} ansible_user={{ ansible_user }} ansible_connection=ssh node_name=nexodus-demo-green-node-{{ item.1 + 1 }}"
  loop: "{{ ec2_jobs_with_index }}"

### VPC Red Security Group  ###
- name: Creating Security Group for VPC Red
  amazon.aws.ec2_group:
    name: "{{ secgroup_name_red }}"
    aws_region: "{{ aws_region }}"
    description: "{{ security_group_description }}"
    vpc_id: "{{ vpc_id_red }}"
    rules:
      - proto: icmp
        from_port: 8
        to_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        ports:
          - 22
        cidr_ip: 0.0.0.0/0

### VPC Red Agent Node Deployment ###
- name: Launching EC2 Instances in VPC Red
  amazon.aws.ec2_instance:
    name: "nexodus-demo-red-node-{{ item+1 }}"
    aws_region: "{{ aws_region }}"
    key_name: "{{ aws_key_name }}"
    instance_type: "{{ aws_instance_type }}"
    image_id: "{{ aws_image_id }}"
    security_group: "{{ secgroup_id_red }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 25
          delete_on_termination: true
          volume_type: standard
    network:
      assign_public_ip: true
    subnet_id: "{{ aws_subnet_red }}"
    tags:
      NodeType: "{{ aws_nodetype_tag }}"
    state: running
    wait: true
  register: nodeIP
  loop: "{{ range(0, node_count_red | int) }}"
  async: 7200
  poll: 0

- name: Wait for all red VPC instances to finish initializing
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: ec2_jobs
  loop: "{{ nodeIP['results'] }}"
  until: ec2_jobs.finished
  retries: 300

- name: Combine ec2_jobs and index
  set_fact:
    ec2_jobs_with_index: "{{ ec2_jobs.results | zip(range(0, node_count_red | int)) | list }}"

- name: Updating the node's public ip in inventory
  lineinfile:
    path: "{{ inventory_location }}"
    regexp: "nexodusNodes"
    line: "[nexodusNodes]\n{{ item.0['instances'][0]['public_ip_address'] }} ansible_user={{ ansible_user }} ansible_connection=ssh node_name=nexodus-demo-red-node-{{ item.1 + 1 }}"
  loop: "{{ ec2_jobs_with_index }}"

### VPC Red  Relay only agents (--relay-only) ###
- name: Launching Relay Only EC2 Instances in VPC Red
  amazon.aws.ec2_instance:
    name: "nexodus-demo-red-relay-node-{{ item+1 }}"
    aws_region: "{{ aws_region }}"
    key_name: "{{ aws_key_name }}"
    instance_type: "{{ aws_instance_type }}"
    image_id: "{{ aws_image_id }}"
    security_group: "{{ secgroup_id_red }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_size: 25
          delete_on_termination: true
          volume_type: standard
    network:
      assign_public_ip: true
    subnet_id: "{{ aws_subnet_red }}"
    tags:
      NodeType: "{{ aws_nodetype_tag }}"
    state: running
    wait: true
  register: nodeIP
  loop: "{{ range(0, relay_node_count_red | int) }}"
  async: 7200
  poll: 0

- name: Wait for all relay only red VPC instances to finish initializing
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: ec2_jobs
  loop: "{{ nodeIP['results'] }}"
  until: ec2_jobs.finished
  retries: 300

- name: Combine ec2_jobs and index
  set_fact:
    ec2_jobs_with_index: "{{ ec2_jobs.results | zip(range(0, relay_node_count_red | int)) | list }}"

- name: Updating the node's public ip in inventory
  lineinfile:
    path: "{{ inventory_location }}"
    regexp: "nexodusRelayNodes"
    line: "[nexodusRelayNodes]\n{{ item.0['instances'][0]['public_ip_address'] }} ansible_user={{ ansible_user }} ansible_connection=ssh node_name=nexodus-demo-red-relay-node-{{ item.1 + 1 }}"
  loop: "{{ ec2_jobs_with_index }}"

- name: Refresh inventory to ensure new instances exist in inventory
  meta: refresh_inventory

- name: Pause for 80 seconds to allow the instances to finish booting and become reachable
  pause:
    seconds: 80
