# This workflow is for attaching to an arbitrary api-server specified in the vars secrets
name: dev-ec2

concurrency:
  group: dev-ec2

on:
  workflow_dispatch:
    inputs:
      deployment_size:
        description: 'deployment size: small | medium | large'
        required: true
        default: 'small'
        type: string

      pr_or_branch:
        description: 'pull request number or branch name'
        required: true
        default: 'main'

jobs:
  deploy-ec2:
    name: deploy-ec2-e2e
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
    env:
      AWS_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ANSIBLE_VAULT_PASSWORD_FILE: "vault-secret.txt"
      ANSIBLE_PRIVATE_KEY_FILE: "nexodus.pem"
      ANSIBLE_HOST_KEY_CHECKING: "false"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Determine if pr_or_branch is a PR number
        id: check_pr
        run: |
          if [[ "${{ github.event.inputs.pr_or_branch }}" =~ ^[0-9]+$ ]]; then
            echo "::set-output name=is_pr::true"
          else
            echo "::set-output name=is_pr::false"
          fi

      - name: Fetch and checkout PR
        if: steps.check_pr.outputs.is_pr == 'true'
        run: |
          git fetch origin pull/${{ github.event.inputs.pr_or_branch }}/head:pr-${{ github.event.inputs.pr_or_branch }}
          git checkout pr-${{ github.event.inputs.pr_or_branch }}

      - name: Checkout branch
        if: steps.check_pr.outputs.is_pr == 'false'
        run: git checkout ${{ github.event.inputs.pr_or_branch }}

      - name: Setup Go
        uses: ./.github/actions/setup-go-env

      - name: Build
        run: |
          make dist/nexd-linux-amd64

      - name:  Copy Agent Binary to S3
        run: |
          aws s3 cp ./dist/nexd-linux-amd64 s3://nexodus-io/ec2-e2e
          aws s3 cp ./hack/e2e-scripts/init-pr-e2e.sh s3://nexodus-io/ec2-e2e/

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible and Dependencies
        run: pip3.10 install boto boto3 ansible-vault ansible-core==2.13.3

      - name: Install amazon.aws Ansible library
        run: ansible-galaxy collection install amazon.aws

      - name: Set Deployment Size to Small
        if: github.event.inputs.deployment_size == 'small'
        run: |
          echo "${{ secrets.ANSIBLE_VARS_SMALL }}" > ./ops/ansible/aws/vars.yml

      - name: Set Deployment Size to Medium
        if: github.event.inputs.deployment_size == 'medium'
        run: |
          echo "${{ secrets.ANSIBLE_VARS_MEDIUM }}" > ./ops/ansible/aws/vars.yml

      - name: Set Deployment Size to Large
        if: github.event.inputs.deployment_size == 'large'
        run: |
          echo "${{ secrets.ANSIBLE_VARS_LARGE }}" > ./ops/ansible/aws/vars.yml

      - name: Create Ansible Secrets
        run: |
          echo "${{ secrets.ANSIBLE_SSH_KEY }}" > nexodus.pem
          chmod 0400 nexodus.pem
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > vault-secret.txt
          chmod 0400 vault-secret.txt
          echo "${{ secrets.ROOT_CA }}" > ./ops/ansible/aws/rootCA.pem
          chmod 0400 ops/ansible/aws/rootCA.pem

      - name: Initialize the api-server Images
        run: |
          mkdir -p ./ops/ansible/aws/nexd-logs/api-server
          ansible-playbook -vv ./hack/e2e-scripts/aws-e2e-pr-build.yml \
          --private-key nexodus.pem \
          -e "target_host=${{ vars.EC2_API_SERVER_ADDR }} pr_or_branch=${{ github.event.inputs.pr_or_branch }} ansible_user=ubuntu"

      - name: Deploy EC2 Agent Nodes
        run: |
          ansible-playbook -vv ./ops/ansible/aws/deploy-ec2.yml \
          -i ./ops/ansible/aws/inventory.txt \
          --private-key nexodus.pem \
          --vault-password-file vault-secret.txt \
          --extra-vars "controller_address=${{ vars.EC2_API_SERVER_ADDR }}"

      - name: Mesh Connectivity Results
        run: |
          set -e
          cat ./ops/ansible/aws/connectivity-results.txt
          if grep -q '0 unreachable' ./ops/ansible/aws/connectivity-results.txt; then
            echo "Connectivity results contain '0 unreachable' nodes"
          else
            echo "Connectivity results do not contain '0 unreachable' nodes, check the connectivity results for details, failing this job"
            exit 1
          fi

      - name: Gather api-server Server Logs
        if: always()
        run: |
          ansible-playbook -vv \
          ./hack/e2e-scripts/aws-e2e-pr-gather.yml \
          --private-key nexodus.pem \
          -e "target_host=${{ vars.EC2_API_SERVER_ADDR }} ansible_user=ubuntu"

      - name: Terminate EC2 Instances
        if: always()
        run: |
          ansible-playbook -vv ./ops/ansible/aws/terminate-instances.yml

      - name: Upload nexd and api-server Logs to Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dev-ec2-artifacts
          path: ./ops/ansible/aws/nexd-logs/
          retention-days: 10
